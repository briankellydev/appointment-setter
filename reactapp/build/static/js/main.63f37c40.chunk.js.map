{"version":3,"sources":["App.tsx","auth/axios.tsx","services/login.service.tsx","Login-components/Login/Login.component.tsx","serviceWorker.ts","Dashboard/Dashboard.component.tsx","Login-components/Signup/Signup.component.tsx","services/tenant.service.tsx","index.tsx"],"names":["App","localStorage","getItem","this","props","history","push","className","router","React","Component","http","axios","create","baseURL","interceptors","request","use","config","defaults","headers","common","response","status","setItem","LoginService","username","password","post","name","loginService","InitialState","KEYS","Login","state","error","handleChange","key","event","setState","target","value","TextField","label","onChange","margin","type","Button","variant","color","onClick","signUp","disabled","login","then","useHistory","catch","Boolean","window","location","hostname","match","Dashboard","tenantService","tenant","passwordConfirm","tenantName","USERNAME","PASSWORD","PASSWORD_CONFIRM","TENANT_NAME","Signup","compareKey","forceUpdate","payload","email","createTenant","routes","exact","path","component","routing","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.63f37c40.chunk.js","sourcesContent":["import React from 'react';\nimport './App.scss';\n\nexport class App extends React.Component<{router: any, history: string[]}> {\n  componentDidMount() {\n    if (localStorage.getItem('x-auth-token')) {\n      this.props.history.push('/dashboard');\n    }\n  }\n\n  render() {\n    return (\n        <div className=\"App\">\n          {this.props.router}\n        </div>\n      \n    );\n  }\n}\n\nexport default App;\n","import axios from 'axios';\n\n// Set config defaults when creating the instance\nexport const http = axios.create({\n    baseURL: 'http://localhost:3000/api'\n});\n\nhttp.interceptors.request.use((config) => {\n    http.defaults.headers.common['x-auth-token'] = localStorage.getItem('x-auth-token');\n    return config;\n});\n\nhttp.interceptors.response.use((config) => {\n    if (config.status === 400 || config.status === 401) {\n        localStorage.setItem('x-auth-token', '');\n    } else {\n        localStorage.setItem('x-auth-token', config.headers['x-auth-token']);\n    }\n    return config;\n});\n\nexport default http;","import http from '../auth/axios';\n\nexport class LoginService {\n    login(username: string, password: string) {\n        return http.post('/auth/login', {username: username, password: password});\n    }\n\n    createUser(username: string, password: string) {\n        return http.post('/users/create', {name: username, password: password});\n    }\n}\n\nexport default LoginService;","import '../shared.scss';\nimport React from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport LoginService from '../../services/login.service';\nimport { useHistory } from 'react-router';\n\nconst loginService = new LoginService();\n\ninterface State {\n    [key: string]: string;\n    username: string;\n    password: string;\n}\n\nconst InitialState = {\n    username: '',\n    password: ''\n}\n\nconst KEYS = {\n    USERNAME: 'username',\n    PASSWORD: 'password'\n}\n\nexport class Login extends React.Component<any, State> {\n\n    state: State;\n    props: any;\n    error: any;\n\n    constructor() {\n        super({}, InitialState);\n        this.state = InitialState;\n    }\n\n    render() {\n        return (\n            <div className=\"Login\">\n                <div className=\"Login-main\">\n                    <h3>Login</h3>\n                    <form>\n                        <div>\n                            <TextField\n                                label=\"Username\"\n                                value={this.state.username}\n                                onChange={this.handleChange(KEYS.USERNAME)}\n                                margin=\"normal\"\n                            />\n                        </div>\n                        <div>\n                            <TextField\n                                label=\"Password\"\n                                value={this.state.password}\n                                type=\"password\"\n                                onChange={this.handleChange(KEYS.PASSWORD)}\n                                margin=\"normal\"\n                            />\n                        </div>\n                        <div className=\"row\">\n                            <div className=\"col-2\"></div>\n                            <div className=\"col-4\">\n                                <Button\n                                    variant=\"contained\"\n                                    color=\"secondary\"\n                                    onClick={() => this.signUp()}\n                                >\n                                    Sign Up\n                                </Button>\n                            </div>\n                            <div className=\"col-4\">\n                                <Button\n                                    variant=\"contained\"\n                                    color=\"primary\"\n                                    disabled={!this.state.username || !this.state.password}\n                                    onClick={() => this.login()}\n                                >\n                                    Login\n                                </Button>\n                            </div>\n                            <div className=\"col-2\"></div>\n                        </div>\n                    </form>\n                    {this.error}\n                </div>\n            </div>\n        );\n    }\n\n    handleChange = (key: string) => (event: any) => {\n        this.setState({[key]: event.target.value});\n    };\n\n    login() {\n        loginService.login(this.state.username, this.state.password).then(() => {\n            useHistory().push('/dashboard');\n        }).catch(() => {\n            this.error = (\n                <div className=\"error\">\n                    Incorrect Credentials\n                </div>\n            );\n        });\n    }\n\n    signUp() {\n        this.props.history.push('/signup');\n    }\n\n}\n\nexport default Login;   ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import './Dashboard.component.scss';\nimport React from 'react';\n\nexport class Dashboard extends React.Component {\n    render() {\n        return (\n            <div>login works</div>\n        );\n    }\n}","import '../shared.scss';\nimport React from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport TenantService from '../../services/tenant.service';\n\nconst tenantService = new TenantService();\n\ninterface State {\n    [key: string]: string;\n    username: string;\n    password: string;\n    passwordConfirm: string;\n    tenantName: string;\n}\n\nconst InitialState = {\n    username: '',\n    password: '',\n    passwordConfirm: '',\n    tenantName: ''\n}\n\nconst KEYS = {\n    USERNAME: 'username',\n    PASSWORD: 'password',\n    PASSWORD_CONFIRM: 'passwordConfirm',\n    TENANT_NAME: 'tenantName'\n}\n\nexport class Signup extends React.Component<any, State> {\n    error: any;\n    props: any;\n\n    constructor() {\n        super({}, InitialState);\n        this.state = InitialState;\n    }\n\n    componentDidUpdate() {\n        \n    }\n\n    render() {\n        return (\n            <div className=\"Signup\">\n                <div className=\"Signup-main\">\n                    <h3>Sign Up</h3>\n                    <form>\n                        <div>\n                            <TextField\n                                label=\"E-mail\"\n                                value={this.state.username}\n                                onChange={this.handleChange(KEYS.USERNAME)}\n                                margin=\"normal\"\n                            />\n                        </div>\n                        <div>\n                            <TextField\n                                label=\"Tenant Name\"\n                                value={this.state.tenantName}\n                                onChange={this.handleChange(KEYS.TENANT_NAME)}\n                                margin=\"normal\"\n                            />\n                        </div>\n                        <div>\n                            <TextField\n                                label=\"Password\"\n                                value={this.state.password}\n                                type=\"password\"\n                                onChange={this.handleChange(KEYS.PASSWORD)}\n                                margin=\"normal\"\n                            />\n                        </div>\n                        <div>\n                            <TextField\n                                label=\"Confirm\"\n                                value={this.state.passwordConfirm}\n                                type=\"password\"\n                                onChange={this.handleChange(KEYS.PASSWORD_CONFIRM)}\n                                margin=\"normal\"\n                            />\n                        </div>\n                        <div>\n                            <Button\n                                variant=\"contained\"\n                                color=\"primary\"\n                                disabled={\n                                    this.state.password !== this.state.passwordConfirm ||\n                                    !this.state.username ||\n                                    !this.state.password ||\n                                    !this.state.tenantName\n                                }\n                                onClick={() => this.signUp()}\n                            >\n                                Sign Up\n                            </Button>\n                        </div>\n                    </form>\n                    {this.error}\n                </div>\n            </div>\n        )\n    }\n\n    handleChange = (key: string) => (event: any) => {\n        this.setState({[key]: event.target.value});\n        const compareKey = key === KEYS.PASSWORD ? KEYS.PASSWORD_CONFIRM : KEYS.PASSWORD;\n        this.error = event.target.value !== this.state[compareKey] ?\n            (\n                <div className=\"error\">\n                    Passwords Must Match\n                </div>\n            ) : (<div></div>);\n        this.forceUpdate();\n    };\n\n    signUp() {\n        const payload = {\n            email: this.state.username,\n            password: this.state.password,\n            name: this.state.tenantName,\n        }\n        tenantService.createTenant(payload).then(() => {\n            this.props.history.push('/signup');\n        }).catch(() => {\n            // error\n        });\n    }\n}","import http from '../auth/axios';\nimport { NewTenant } from '../interfaces/tenant.interface';\n\nexport class TenantService {\n    createTenant(tenant: NewTenant) {\n        return http.post('/tenants/create', tenant);\n    }\n}\n\nexport default TenantService;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport Login from './Login-components/Login/Login.component';\nimport { Route, Link, BrowserRouter as Router } from 'react-router-dom';\nimport * as serviceWorker from './serviceWorker';\nimport { Dashboard } from './Dashboard/Dashboard.component';\nimport { Signup } from './Login-components/Signup/Signup.component';\n\nconst routes = (\n    <Router>\n        <div>\n            <Route exact path=\"/\" component={Login} />\n            <Route path=\"/signup\" component={Signup} />\n            <Route path=\"/dashboard\" component={Dashboard} />\n        </div>\n    </Router>\n);\n\nconst routing = (\n    <App router={routes} history={[]}></App>\n    \n  )\n\nReactDOM.render(routing, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}